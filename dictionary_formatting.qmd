---
title: "cMD metadata dictionary formatting for Genestack ODM"
author: "Sehyun Oh"
date: "`r format(Sys.time(), '%B %d, %Y')`"
vignette: >
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteIndexEntry{cMD dictionaries for Genestack}
  %\VignetteEncoding{UTF-8}
output:
  BiocStyle::html_document:
    number_sections: yes
    toc: yes
    toc_depth: 4
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(comment = "#>", 
                      collapse = TRUE, 
                      message = FALSE, 
                      warning = FALSE, 
                      eval = FALSE)
```

```{r packages}
library(readr)
library(dplyr)
library(stringr)
```

```{r}
#dd <- readr::read_csv("~/OmicsMLRepo/OmicsMLRepoData/inst/extdata/cMD_data_dictionary.csv")
dd <- readr::read_csv("~/Desktop/Work/OmicsMLRepoData/inst/extdata/cMD_data_dictionary.csv")
```

# NCIT
```{bash eval=FALSE}
## Download `ncit.obo` in `~/Projects/curatedMetagenomicDataODM` directory
wget https://purl.obolibrary.org/obo/ncit.obo
```

## recist
```{r echo=FALSE, eval=FALSE}
ncit <- ontologyIndex::get_ontology("~/Projects/curatedMetagenomicDataODM/ncit.obo")
recist_terms <- c("NCIT:C159715", "NCIT:C159547", "NCIT:C159716", "NCIT:C159546")
writeLines(recist_terms, "dictionaries_terms/recist.txt")
recist_ind <- which(ncit$id %in% recist_terms)
recist_obo <- lapply(ncit, function(x) {x[recist_ind]})

library(BiocSet)
x <- import("~/Projects/curatedMetagenomicDataODM/ncit.obo")
y <- x %>% filter(element %in% recist_terms)
export(y, "dictionaries/cmd_recist.obo")
```

```{r}
recist_terms <- c("NCIT:C159715", "NCIT:C159547", "NCIT:C159716", "NCIT:C159546")
writeLines(recist_terms, "dictionaries_terms/recist.txt")
```

```{bash eval=FALSE}
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/recist.txt \
    --output dictionaries_owl/cMD_disease_response_recist.owl
```

## age_group
```{r}
attrName <- "age_group"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% .[c(5,3,1,2,4)]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="age_group"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

## age_unit
```{r}
attrName <- "age_unit"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="age_unit"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

## control
```{r}
attrName <- "control"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="control"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

## neonatal_delivery_procedure
```{r}
attrName <- "neonatal_delivery_procedure"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="neonatal_delivery_procedure"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

## treatment (dynamic enums)
```{bash}
## Used dynamic enum node for cMD_treatment
robot extract --method MIREOT \
    --input ontologies/ncit.obo \
    --branch-from-term "NCIT:C1908" \
    --output dictionaries_owl/cmd_treatment_enums.owl
```

## country (dynamic enums)
```{bash}
attrName="country"
robot extract --method MIREOT \
    --input ontologies/ncit.obo \
    --branch-from-term "NCIT:C25464" \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
```

## obgyn_menopause (dynamic enums)
```{bash}
attrName="obgyn_menopause"
robot extract --method MIREOT \
    --input ontologies/ncit.obo \
    --branch-from-term "NCIT:C106541" \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
```

## disease (dynamic enums)
```{r}
obo <- ontologyIndex::get_ontology("~/Projects/curatedMetagenomicDataODM/ontologies/efo.obo")
```

```{bash}
attrName="disease"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term "NCIT:C115935" \
    --output dictionaries_owl/cmd_${attrName}_NCIT_healthy.owl

attrName="disease"
robot extract --method MIREOT \
    --input ontologies/ncit.obo \
    --branch-from-term "NCIT:C7057" \
    --output dictionaries_owl/cmd_${attrName}_NCIT_disease.owl
    
attrName="disease"
robot merge \
    --input dictionaries_owl/cmd_disease_NCIT_healthy.owl \
    --input dictionaries_owl/cmd_disease_NCIT_disease.owl \
    --output dictionaries_owl/cmd_${attrName}_NCIT_enums.owl
    
## Download `efo.obo` from http://www.ebi.ac.uk/efo/efo.obo
## wget http://www.ebi.ac.uk/efo/efo.obo in the `ontologies` directory
attrName="disease"
robot extract --method MIREOT \
    --input ontologies/efo.obo \
    --branch-from-term "http://purl.obolibrary.org/obo/EFO_0000408" \
    --output dictionaries_owl/cmd_${attrName}_EFO_enums.owl

attrName="disease"
robot merge \
    --input dictionaries_owl/cmd_disease_NCIT_enums.owl \
    --input dictionaries_owl/cmd_disease_EFO_enums.owl \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
```

## biomarker
```{r}
attrName <- "biomarker"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Split terms into respective ontologies
prefs <- str_extract(attrVals, "^.+(?=:)")
groups <- split(attrVals, prefs)

## Create and save manual template for SNOMED term
groups$SNOMED <- NULL
snomed_template <- data.frame(ID = c("ID",
                                     "SNOMED:165879008",
                                     "SNOMED:117907009",
                                     "SNOMED:14089001",
                                     "SNOMED:767002"),
                              Label = c("A rdfs:label",
                                        "Autoantibody titer positive (finding)",
                                        "Measurement of glutamate decarboxylase65 antibody (procedure)",
                                        "Red blood cell count (procedure)",
                                        "White blood cell count (procedure)"))
tpath <- paste0("dictionaries_templates/", attrName, "_SNOMED.csv")
write.csv(snomed_template, tpath, row.names = FALSE)

## Replace obsolete EFO terms with suggested OBA terms
groups$OBA <- c("OBA:VT0000188", "OBA:VT0001560")
groups$EFO <- NULL

## Save the lists of static ontology terms
saveStatic <- function(attr, name, terms) {
    fpath <- paste0("dictionaries_terms/", attr, "_", name,".txt")
    writeLines(terms, fpath)
}

mapply(function(n, t) saveStatic(attrName, n, t),
       names(groups),
       groups)
```

```{bash}
attrName="biomarker_NCIT"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="biomarker_SNOMED"
robot template \
    --template dictionaries_templates/${attrName}.csv \
    --prefix "SNOMED: http://snomed.info/id/" \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="biomarker_OBA"
robot extract --method subset \
    --input ontologies/oba.owl \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="biomarker_OMIT"
robot extract --method subset \
    --input ontologies/omit.owl \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl

attrName="biomarker"
robot merge \
    --input dictionaries_owl/cmd_biomarker_OBA.owl \
    --input dictionaries_owl/cmd_biomarker_NCIT.owl \
    --input dictionaries_owl/cmd_biomarker_OMIT.owl \
    --input dictionaries_owl/cmd_biomarker_SNOMED.owl \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
```

## target_condition
```{r}
attrName <- "target_condition"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Split terms into respective ontologies
prefs <- str_extract(attrVals, "^.+(?=:)")
groups <- split(attrVals, prefs)

## Add back in SNOMED term without prefix
groups <- c(groups, list(SNOMED=c("SNOMED:713351000")))

## Create and save manual template for SNOMED term
snomed_template <- data.frame(ID = c("ID", "SNOMED:713351000"),
                              Label = c("A rdfs:label", "Multidrug-resistant bacteria (organism)"),
                              Definition = c("A IAO:0000115", "Multi Drug Resistance (MDR) is defined as non-susceptibility to at least one agent in three or more epidemiologically significant antimicrobial categories. Non-susceptibility refers to either a resistant, intermediate or non-susceptible result obtained from in vitro antimicrobial susceptibility testing. (DOI: 10.1111/j.1469-0691.2011.03570.x)"))
tpath <- paste0("dictionaries_terms/", attrName, "_SNOMED.csv")
write.csv(snomed_template, tpath, row.names = FALSE)

## Modify EFO terms to work with robot
groups$EFO <- str_replace(groups$EFO, "EFO:", "http://purl.obolibrary.org/obo/EFO_")

## Save the lists of static ontology terms
saveStatic <- function(attr, name, terms) {
    fpath <- paste0("dictionaries_terms/", attr, "_", name,".txt")
    writeLines(terms, fpath)
}

mapply(function(n, t) saveStatic(attrName, n, t),
       names(groups),
       groups)
```

```{bash}
attrName="target_condition_EFO"
robot extract --method subset \
    --input ontologies/efo.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="target_condition_NCIT"
robot extract --method subset \
    --input ontologies/ncit.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="target_condition_OHMI"
robot extract --method subset \
    --input ontologies/ohmi.owl \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
    
attrName="target_condition_MONDO"
robot extract --method subset \
    --input ontologies/mondo.obo \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl

attrName="target_condition_SNOMED"
robot template \
    --template dictionaries_templates/${attrName}.csv \
    --prefix "SNOMED: http://snomed.info/id/" \
    --output dictionaries_owl/cmd_${attrName}.owl

attrName="target_condition"
robot merge \
    --input dictionaries_owl/cmd_${attrName}_NCIT.owl \
    --input dictionaries_owl/cmd_${attrName}_OHMI.owl \
    --input dictionaries_owl/cmd_${attrName}_MONDO.owl \
    --input dictionaries_owl/cmd_${attrName}_SNOMED.owl \
    --input dictionaries_owl/cmd_${attrName}_EFO.owl \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
    ```

# MRO
Download `mro.owl` from https://obofoundry.org/.

## hla (dynamic enums)
```{bash}
attrName="hla"
robot extract --method MIREOT \
    --input ontologies/mro.owl \
    --branch-from-term "MRO:0001676" \
    --output dictionaries_owl/cmd_${attrName}_enums.owl
```

# FMA
Download `fma.owl` version 5.0.0 from https://bioportal.bioontology.org/ontologies/FMA.

# HANCESTRO
Download `hancestro.owl` from https://obofoundry.org/.

## ancestry
```{r}
attrName <- "ancestry"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="ancestry"
robot extract --method subset \
    --input ontologies/hancestro.owl \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

# UBERON
Download `uberon.owl` from https://obofoundry.org/.

## body_site
```{r}
attrName <- "body_site"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(ontology) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]]
unique(OmicsMLRepoR::get_ontologies(attrVals)) # ontology used for this attribute

## Save the list of static ontology terms
fpath <- paste0("dictionaries_terms/", attrName,".txt")
writeLines(attrVals, fpath)
```

```{bash}
attrName="body_site"
robot extract --method subset \
    --input ontologies/uberon.owl \
    --term-file dictionaries_terms/${attrName}.txt \
    --output dictionaries_owl/cmd_${attrName}.owl
```

# Simple CSV
## smoker
`snomed.owl` is a bit tricky to download. I made the simple csv for this attribute.
```{r}
attrName <- "smoker"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## dietary_restriction
No ontology terms used for this attribute.
```{r}
attrName <- "dietary_restriction"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## curator
No ontology terms used for this attribute.
```{r}
attrName <- "curator"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = ";|\\|") %>% .[[1]] %>% 
    unique 
updatedAttrVals <- c(attrVals, "Alice_Bassetto") %>% sort %>% c("label", .)


## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(updatedAttrVals, fpath)
```

## fmt_role
No ontology terms used for this attribute.
```{r}
attrName <- "fmt_role"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## lifestyle
No ontology terms used for this attribute.
```{r}
attrName <- "lifestyle"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## neonatal_feeding_method
No ontology terms used for this attribute.
```{r}
attrName <- "neonatal_feeding_method"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## tumor_staging_ajcc
No ontology terms used for this attribute.
```{r}
attrName <- "tumor_staging_ajcc"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## zygosity
No ontology terms used for this attribute.
```{r}
attrName <- "zygosity"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## family_role
No ontology terms used for this attribute.
```{r}
attrName <- "family_role"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## feces_phenotype_metric
Contains values from different ontologies, including SNOMED.
```{r}
attrName <- "feces_phenotype_metric"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## obgyn_pregnancy
Straight-foward concepts
```{r}
attrName <- "obgyn_pregnancy"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## sex
```{r}
attrName <- "sex"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## probing_pocket_depth
Can't find the correct version of `fma.owl`
```{r}
attrName <- "probing_pocket_depth"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## dna_extraction_kit
```{r}
attrName <- "dna_extraction_kit"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## sequencing_platform
```{r}
attrName <- "sequencing_platform"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues) %>% unlist %>%
    strsplit(., split = "\\|") %>% .[[1]] %>% c("label", .)

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName,".csv")
writeLines(attrVals, fpath)
```

## tumor_staging_tnm
```{r}
attrName <- "tumor_staging_tnm"
attrVals <- dd %>% filter(col.name == attrName) %>%
    select(allowedvalues)

## Create list of all possible TNM values
tnm_list <- list("T" = c("TX", "T0", "T1", "T2", "T3", "T4"),
                 "N" = c("NX", "N0", "N1", "N2", "N3"),
                 "M" = c("MX", "M0", "M1"))

tnm_vals <- expand.grid(tnm_list)
tnm_codes <- paste0(tnm_vals$T, tnm_vals$N, tnm_vals$M)
tnm_codes <- c("label", tnm_codes, "Tis", "pTis")

## Save the list of static ontology terms
fpath <- paste0("dictionaries_owl/cmd_", attrName, ".csv")
writeLines(tnm_codes, fpath)
```

